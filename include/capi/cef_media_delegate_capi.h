// Copyright (c) 2016 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//

#ifndef CEF_INCLUDE_CAPI_CEF_MEDIA_DELEGATE_CAPI_H_
#define CEF_INCLUDE_CAPI_CEF_MEDIA_DELEGATE_CAPI_H_
#pragma once

#include "include/capi/cef_base_capi.h"

#ifdef __cplusplus
extern "C" {
#endif


///
// Callback structure used by the client to signal media events
///
typedef struct _cef_media_event_callback_t {
  ///
  // Base structure.
  ///
  cef_base_t base;

  ///
  // Signal an end of stream
  ///
  void (CEF_CALLBACK *end_of_stream)(struct _cef_media_event_callback_t* self);

  ///
  // Signal a resolution change
  ///
  void (CEF_CALLBACK *resolution_changed)(
      struct _cef_media_event_callback_t* self, int width, int height);

  ///
  // Signal a video PTS
  ///
  void (CEF_CALLBACK *video_pts)(struct _cef_media_event_callback_t* self,
      int64 pts);

  ///
  // Signal an audio PTS
  ///
  void (CEF_CALLBACK *audio_pts)(struct _cef_media_event_callback_t* self,
      int64 pts);

  ///
  // Signal that the underlying stack has enough data to play
  ///
  void (CEF_CALLBACK *have_enough)(struct _cef_media_event_callback_t* self);
} cef_media_event_callback_t;


///
// Delegate structure implemented by the client to handle media
///
typedef struct _cef_media_delegate_t {
  ///
  // Base structure.
  ///
  cef_base_t base;

  ///
  // Used to set the event callback structure from the library that the client
  // should use
  ///
  void (CEF_CALLBACK *set_event_callback)(struct _cef_media_delegate_t* self,
      struct _cef_media_event_callback_t* event);

  ///
  // Called when the client should stop current playback
  ///
  void (CEF_CALLBACK *stop)(struct _cef_media_delegate_t* self);

  ///
  // Called when the client should cleanup before being destroyed
  ///
  void (CEF_CALLBACK *cleanup)(struct _cef_media_delegate_t* self);

  ///
  // Called when the client should pause current playback
  ///
  void (CEF_CALLBACK *pause)(struct _cef_media_delegate_t* self);

  ///
  // Called when the client should reset itself
  ///
  void (CEF_CALLBACK *reset)(struct _cef_media_delegate_t* self);

  ///
  // Called when the client should start playback
  ///
  void (CEF_CALLBACK *play)(struct _cef_media_delegate_t* self);

  ///
  // Called when the client should resume playback
  ///
  void (CEF_CALLBACK *resume)(struct _cef_media_delegate_t* self);

  ///
  // Called to set the client playback speed rate
  ///
  void (CEF_CALLBACK *set_speed)(struct _cef_media_delegate_t* self,
      double rate);

  ///
  // Called to set the client playback audio volume
  ///
  void (CEF_CALLBACK *set_volume)(struct _cef_media_delegate_t* self,
      float volume);

  ///
  // Called to set the client video plan
  ///
  void (CEF_CALLBACK *set_video_plan)(struct _cef_media_delegate_t* self, int x,
      int y, int width, int height, unsigned int display_width,
      unsigned int display_height);

  ///
  // Called to check that the client supports a specific video codec
  ///
  int (CEF_CALLBACK *check_video_codec)(struct _cef_media_delegate_t* self,
      cef_video_codec_t codec);

  ///
  // Called to check that the client supports a specific audio codec
  ///
  int (CEF_CALLBACK *check_audio_codec)(struct _cef_media_delegate_t* self,
      cef_audio_codec_t codec);

  ///
  // Called when the client should flush
  ///
  void (CEF_CALLBACK *flush)(struct _cef_media_delegate_t* self);

  ///
  // Called to get the maximum number of audio samples that can be sent
  ///
  int (CEF_CALLBACK *max_audio_sample_count)(
      struct _cef_media_delegate_t* self);

  ///
  // Called to get the maximum number of video samples that can be sent
  ///
  int (CEF_CALLBACK *max_video_sample_count)(
      struct _cef_media_delegate_t* self);

  ///
  // Called when the client should open its audio layer
  ///
  int (CEF_CALLBACK *open_audio)(struct _cef_media_delegate_t* self);

  ///
  // Called when the client should open its video layer
  ///
  int (CEF_CALLBACK *open_video)(struct _cef_media_delegate_t* self);

  ///
  // Called when the client should close its audio layer
  ///
  void (CEF_CALLBACK *close_audio)(struct _cef_media_delegate_t* self);

  ///
  // Called when the client should close its video layer
  ///
  void (CEF_CALLBACK *close_video)(struct _cef_media_delegate_t* self);

  ///
  // Called to send an audio buffer
  ///
  int (CEF_CALLBACK *send_audio_buffer)(struct _cef_media_delegate_t* self,
      char* buf, int size, int64 pts);

  ///
  // Called to send a video buffer
  ///
  int (CEF_CALLBACK *send_video_buffer)(struct _cef_media_delegate_t* self,
      char* buf, int size, int64 pts);
} cef_media_delegate_t;


#ifdef __cplusplus
}
#endif

#endif  // CEF_INCLUDE_CAPI_CEF_MEDIA_DELEGATE_CAPI_H_
