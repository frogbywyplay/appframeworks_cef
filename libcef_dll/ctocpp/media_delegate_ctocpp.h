// Copyright (c) 2016 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#ifndef CEF_LIBCEF_DLL_CTOCPP_MEDIA_DELEGATE_CTOCPP_H_
#define CEF_LIBCEF_DLL_CTOCPP_MEDIA_DELEGATE_CTOCPP_H_
#pragma once

#ifndef BUILDING_CEF_SHARED
#pragma message("Warning: "__FILE__" may be accessed DLL-side only")
#else  // BUILDING_CEF_SHARED

#include "include/cef_media_delegate.h"
#include "include/capi/cef_media_delegate_capi.h"
#include "libcef_dll/ctocpp/ctocpp.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class CefMediaDelegateCToCpp
    : public CefCToCpp<CefMediaDelegateCToCpp, CefMediaDelegate,
        cef_media_delegate_t> {
 public:
  CefMediaDelegateCToCpp();

  // CefMediaDelegate methods.
  void SetEventCallback(CefRefPtr<CefMediaEventCallback> event) override;
  void Stop() override;
  void Cleanup() override;
  void Pause() override;
  void Reset() override;
  void Play() override;
  void Resume() override;
  void SetSpeed(double rate) override;
  void SetVolume(float volume) override;
  void SetVideoPlan(int x, int y, int width, int height,
      unsigned int display_width, unsigned int display_height) override;
  bool CheckVideoCodec(cef_video_codec_t codec) override;
  bool CheckAudioCodec(cef_audio_codec_t codec) override;
  void Flush() override;
  int MaxAudioSampleCount() override;
  int MaxVideoSampleCount() override;
  bool OpenAudio() override;
  bool OpenVideo() override;
  void CloseAudio() override;
  void CloseVideo() override;
  int SendAudioBuffer(char* buf, int size, int64 pts) override;
  int SendVideoBuffer(char* buf, int size, int64 pts) override;
};

#endif  // BUILDING_CEF_SHARED
#endif  // CEF_LIBCEF_DLL_CTOCPP_MEDIA_DELEGATE_CTOCPP_H_
