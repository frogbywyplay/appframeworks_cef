// Copyright (c) 2016 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/sslkey_delegate_cpptoc.h"


namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK sslkey_delegate_get_digest_preferences(
    struct _cef_sslkey_delegate_t* self, cef_hash_type_t **supported,
    int *count)
{

  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefSSLKeyDelegateCppToC::Get(self)->GetDigestPreferences(
      supported,
      count);
}
size_t CEF_CALLBACK sslkey_delegate_get_max_signature_length_in_bytes(
    struct _cef_sslkey_delegate_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;

  // Execute
  size_t _retval = CefSSLKeyDelegateCppToC::Get(
      self)->GetMaxSignatureLengthInBytes();

  // Return type: simple
  return _retval;
}

int CEF_CALLBACK sslkey_delegate_sign_digest(
    struct _cef_sslkey_delegate_t* self, cef_key_type_t key_type,
    cef_hash_type_t hash_type, const uint8* digest, const uint32 digest_len,
    uint8 *sig, uint32 *sig_len)
{
  DCHECK(self);
  if (!self)
    return -1;

  return CefSSLKeyDelegateCppToC::Get(self)->SignDigest(
    key_type, hash_type, digest, digest_len, sig, sig_len);
}
}  // namespace


// CONSTRUCTOR - Do not edit by hand.

CefSSLKeyDelegateCppToC::CefSSLKeyDelegateCppToC() {
  GetStruct()->get_digest_preferences = sslkey_delegate_get_digest_preferences;
  GetStruct()->get_max_signature_length_in_bytes =
      sslkey_delegate_get_max_signature_length_in_bytes;
  GetStruct()->sign_digest = sslkey_delegate_sign_digest;
}

template<> CefRefPtr<CefSSLKeyDelegate> CefCppToC<CefSSLKeyDelegateCppToC,
    CefSSLKeyDelegate, cef_sslkey_delegate_t>::UnwrapDerived(
    CefWrapperType type, cef_sslkey_delegate_t* s) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#ifndef NDEBUG
template<> base::AtomicRefCount CefCppToC<CefSSLKeyDelegateCppToC,
    CefSSLKeyDelegate, cef_sslkey_delegate_t>::DebugObjCt = 0;
#endif

template<> CefWrapperType CefCppToC<CefSSLKeyDelegateCppToC, CefSSLKeyDelegate,
    cef_sslkey_delegate_t>::kWrapperType = WT_SSLKEY_DELEGATE;
