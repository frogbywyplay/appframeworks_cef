// Copyright (c) 2016 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/ctocpp/sslkey_delegate_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

void CefSSLKeyDelegateCToCpp::GetDigestPreferences(cef_hash_type_t **supported,
    int *count)
{
  cef_sslkey_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, get_digest_preferences))
    return;

  // Execute
  _struct->get_digest_preferences(_struct,
      supported,
      count);
}
size_t CefSSLKeyDelegateCToCpp::GetMaxSignatureLengthInBytes() {
  cef_sslkey_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, get_max_signature_length_in_bytes))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_max_signature_length_in_bytes(_struct);

  // Return type: simple
  return _retval;
}

int CefSSLKeyDelegateCToCpp::SignDigest(cef_key_type_t key_type,
    cef_hash_type_t hash_type, const uint8* digest, const uint32 digest_len,
    uint8 *sig, uint32 *sig_len)
{
  cef_sslkey_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, sign_digest))
    return 0;

  int _retval = _struct->sign_digest(_struct, key_type, hash_type, digest, digest_len, sig, sig_len);

  return _retval;
}

// CONSTRUCTOR - Do not edit by hand.

CefSSLKeyDelegateCToCpp::CefSSLKeyDelegateCToCpp() {
}

template<> cef_sslkey_delegate_t* CefCToCpp<CefSSLKeyDelegateCToCpp,
    CefSSLKeyDelegate, cef_sslkey_delegate_t>::UnwrapDerived(
    CefWrapperType type, CefSSLKeyDelegate* c) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#ifndef NDEBUG
template<> base::AtomicRefCount CefCToCpp<CefSSLKeyDelegateCToCpp,
    CefSSLKeyDelegate, cef_sslkey_delegate_t>::DebugObjCt = 0;
#endif

template<> CefWrapperType CefCToCpp<CefSSLKeyDelegateCToCpp, CefSSLKeyDelegate,
    cef_sslkey_delegate_t>::kWrapperType = WT_SSLKEY_DELEGATE;
