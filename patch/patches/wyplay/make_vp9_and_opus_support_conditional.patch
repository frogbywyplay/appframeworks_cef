--- media/filters/stream_parser_factory.cc	2017-12-07 11:10:34.119804824 +0000
+++ media/filters/stream_parser_factory.cc	2017-12-07 11:13:08.702872653 +0000
@@ -333,38 +333,16 @@
     std::vector<CodecInfo::HistogramTag>* video_codecs) {
   switch (codec_info->type) {
     case CodecInfo::AUDIO:
+      if (codec_info->tag == CodecInfo::HISTOGRAM_OPUS &&
+          !media::PlatformHasOpusSupport())
+        return false;
       if (audio_codecs)
         audio_codecs->push_back(codec_info->tag);
       return true;
     case CodecInfo::VIDEO:
-#if defined(OS_ANDROID)
-      // TODO(wolenetz, dalecurtis): This should instead use MimeUtil() to avoid
-      // duplication of subtle Android behavior.  http://crbug.com/587303.
-      if (codec_info->tag == CodecInfo::HISTOGRAM_H264) {
-        if (media::IsUnifiedMediaPipelineEnabled() &&
-            !media::HasPlatformDecoderSupport()) {
-          return false;
-        }
-
-        if (!MediaCodecUtil::IsMediaCodecAvailable())
-          return false;
-      }
-      if (codec_info->tag == CodecInfo::HISTOGRAM_VP8 &&
-          !media::MediaCodecUtil::IsVp8DecoderAvailable() &&
-          !media::IsUnifiedMediaPipelineEnabled()) {
-        return false;
-      }
       if (codec_info->tag == CodecInfo::HISTOGRAM_VP9 &&
-          !media::MediaCodecUtil::IsVp9DecoderAvailable() &&
-          !media::IsUnifiedMediaPipelineEnabled()) {
-        return false;
-      }
-      if (codec_info->tag == CodecInfo::HISTOGRAM_OPUS &&
-          !media::PlatformHasOpusSupport() &&
-          !media::IsUnifiedMediaPipelineEnabled()) {
+          !media::PlatformHasVP9Support())
         return false;
-      }
-#endif
       if (video_codecs)
         video_codecs->push_back(codec_info->tag);
       return true;
--- media/base/media.h	2017-10-31 09:49:13.351769183 +0000
+++ media/base/media.h	2017-10-31 09:50:00.723474807 +0000
@@ -47,6 +47,9 @@
 MEDIA_EXPORT bool ArePlatformDecodersAvailable();
 #endif
 
+MEDIA_EXPORT bool PlatformHasOpusSupport();
+MEDIA_EXPORT bool PlatformHasVP9Support();
+
 }  // namespace media
 
 #endif  // MEDIA_BASE_MEDIA_H_

