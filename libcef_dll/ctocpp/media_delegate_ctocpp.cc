// Copyright (c) 2016 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/media_event_callback_cpptoc.h"
#include "libcef_dll/ctocpp/media_delegate_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

void CefMediaDelegateCToCpp::SetEventCallback(
    CefRefPtr<CefMediaEventCallback> event)
{
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, set_event_callback))
    return;

  _struct->set_event_callback(_struct, CefMediaEventCallbackCppToC::Wrap(event));
}
void CefMediaDelegateCToCpp::Stop() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, stop))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->stop(_struct);
}

void CefMediaDelegateCToCpp::Cleanup() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, cleanup))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->cleanup(_struct);
}

void CefMediaDelegateCToCpp::Pause() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, pause))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->pause(_struct);
}

void CefMediaDelegateCToCpp::Reset() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, reset))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->reset(_struct);
}

void CefMediaDelegateCToCpp::Play() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, play))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->play(_struct);
}

void CefMediaDelegateCToCpp::Resume() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, resume))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->resume(_struct);
}

void CefMediaDelegateCToCpp::SetSpeed(double rate) {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, set_speed))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_speed(_struct,
      rate);
}

void CefMediaDelegateCToCpp::SetVolume(float volume) {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, set_volume))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_volume(_struct,
      volume);
}

void CefMediaDelegateCToCpp::SetVideoPlan(int x, int y, int width, int height,
    unsigned int display_width, unsigned int display_height) {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, set_video_plan))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_video_plan(_struct,
      x,
      y,
      width,
      height,
      display_width,
      display_height);
}

bool CefMediaDelegateCToCpp::CheckVideoCodec(cef_video_codec_t codec) {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, check_video_codec))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->check_video_codec(_struct,
      codec);

  // Return type: bool
  return _retval?true:false;
}

bool CefMediaDelegateCToCpp::CheckAudioCodec(cef_audio_codec_t codec) {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, check_audio_codec))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->check_audio_codec(_struct,
      codec);

  // Return type: bool
  return _retval?true:false;
}

void CefMediaDelegateCToCpp::Flush() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, flush))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->flush(_struct);
}

int CefMediaDelegateCToCpp::MaxAudioSampleCount() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, max_audio_sample_count))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->max_audio_sample_count(_struct);

  // Return type: simple
  return _retval;
}

int CefMediaDelegateCToCpp::MaxVideoSampleCount() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, max_video_sample_count))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->max_video_sample_count(_struct);

  // Return type: simple
  return _retval;
}

bool CefMediaDelegateCToCpp::OpenAudio() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, open_audio))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->open_audio(_struct);

  // Return type: bool
  return _retval?true:false;
}

bool CefMediaDelegateCToCpp::OpenVideo() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, open_video))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->open_video(_struct);

  // Return type: bool
  return _retval?true:false;
}

void CefMediaDelegateCToCpp::CloseAudio() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, close_audio))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->close_audio(_struct);
}

void CefMediaDelegateCToCpp::CloseVideo() {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, close_video))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->close_video(_struct);
}

int CefMediaDelegateCToCpp::SendAudioBuffer(char* buf, int size, int64 pts) {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, send_audio_buffer))
    return -1;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: buf; type: simple_byaddr
  DCHECK(buf);
  if (!buf)
    return -1;

  // Execute
  int _retval = _struct->send_audio_buffer(_struct,
      buf,
      size,
      pts);

  // Return type: simple
  return _retval;
}

int CefMediaDelegateCToCpp::SendVideoBuffer(char* buf, int size, int64 pts) {
  cef_media_delegate_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, send_video_buffer))
    return -1;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: buf; type: simple_byaddr
  DCHECK(buf);
  if (!buf)
    return -1;

  // Execute
  int _retval = _struct->send_video_buffer(_struct,
      buf,
      size,
      pts);

  // Return type: simple
  return _retval;
}


// CONSTRUCTOR - Do not edit by hand.

CefMediaDelegateCToCpp::CefMediaDelegateCToCpp() {
}

template<> cef_media_delegate_t* CefCToCpp<CefMediaDelegateCToCpp,
    CefMediaDelegate, cef_media_delegate_t>::UnwrapDerived(CefWrapperType type,
    CefMediaDelegate* c) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#ifndef NDEBUG
template<> base::AtomicRefCount CefCToCpp<CefMediaDelegateCToCpp,
    CefMediaDelegate, cef_media_delegate_t>::DebugObjCt = 0;
#endif

template<> CefWrapperType CefCToCpp<CefMediaDelegateCToCpp, CefMediaDelegate,
    cef_media_delegate_t>::kWrapperType = WT_MEDIA_DELEGATE;
