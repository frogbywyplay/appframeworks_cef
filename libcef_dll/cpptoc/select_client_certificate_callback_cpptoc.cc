// Copyright (c) 2016 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/select_client_certificate_callback_cpptoc.h"


namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK select_client_certificate_callback_run(
    struct _cef_select_client_certificate_callback_t* self,
    const cef_string_t* cert_path, const cef_string_t* key_path)
{
  DCHECK(self);
  if (!self)
    return;

  // Execute
  CefSelectClientCertificateCallbackCppToC::Get(self)->Run(cert_path, key_path);
}
}  // namespace


// CONSTRUCTOR - Do not edit by hand.

CefSelectClientCertificateCallbackCppToC::CefSelectClientCertificateCallbackCppToC(
    ) {
  GetStruct()->run = select_client_certificate_callback_run;
}

template<> CefRefPtr<CefSelectClientCertificateCallback> CefCppToC<CefSelectClientCertificateCallbackCppToC,
    CefSelectClientCertificateCallback,
    cef_select_client_certificate_callback_t>::UnwrapDerived(
    CefWrapperType type, cef_select_client_certificate_callback_t* s) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#ifndef NDEBUG
template<> base::AtomicRefCount CefCppToC<CefSelectClientCertificateCallbackCppToC,
    CefSelectClientCertificateCallback,
    cef_select_client_certificate_callback_t>::DebugObjCt = 0;
#endif

template<> CefWrapperType CefCppToC<CefSelectClientCertificateCallbackCppToC,
    CefSelectClientCertificateCallback,
    cef_select_client_certificate_callback_t>::kWrapperType =
    WT_SELECT_CLIENT_CERTIFICATE_CALLBACK;
